#jinja2:variable_start_string:'[%' , variable_end_string:'%]'
#!/bin/bash

# Copyright Project Harbor Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# https://github.com/stonezdj/harbor/blob/backup_restore/tools/harbor-restore.sh

CURRENT_DATE=`date '+%Y%m%d'`
CURRENT_TIME=`date '+%Y%m%d_%H%M%S'`

BACKUP_DIR=`dirname "$1"`
TGZ_FILE=`basename "$1"`
HARBOR_IP="$2"
HARBOR_DIR="[% registry_data_dir %]"

error_exit() {
    echo "error: ${1:-"unknown error"}" 1>&2
    exit 1
}

extract_backup(){
    tar xvf ${TGZ_FILE}
}

launch_db() {
    cnt=$($DOCKER_CMD ps -a | grep goharbor | tail -n +2 | wc -l)
    if [ $cnt -gt 0 ]; then
        echo "There is running container, please stop and remove it before restore"
        exit 1
    fi
    $DOCKER_CMD run -d --name harbor-db -v ${BACKUP_DIR}:/backup -v ${harbor_db_path}:/var/lib/postgresql/data ${harbor_db_image} "postgres"
}

clean_db() {
    $DOCKER_CMD stop harbor-db
    $DOCKER_CMD rm harbor-db
}

wait_for_db_ready() {
    set +e
    TIMEOUT=12
    while [ $TIMEOUT -gt 0 ]; do
        $DOCKER_CMD exec harbor-db pg_isready | grep "accepting connections"
        if [ $? -eq 0 ]; then
                break
        fi
        TIMEOUT=$((TIMEOUT - 1))
        sleep 5
    done
    if [ $TIMEOUT -eq 0 ]; then
        echo "Harbor DB cannot reach within one minute."
        clean_db
        exit 1
    fi
    set -e
}

clean_database_data(){
  set +e
  $DOCKER_CMD exec harbor-db psql -U postgres -d template1 -c "drop database registry;"
  $DOCKER_CMD exec harbor-db psql -U postgres -d template1 -c "drop database postgres;"
  $DOCKER_CMD exec harbor-db psql -U postgres -d template1 -c "drop database notarysigner; "
  $DOCKER_CMD exec harbor-db psql -U postgres -d template1 -c "drop database notaryserver;"
  set -e

  $DOCKER_CMD exec harbor-db psql -U postgres -d template1 -c "create database registry;"
  $DOCKER_CMD exec harbor-db psql -U postgres -d template1 -c "create database postgres;"
  $DOCKER_CMD exec harbor-db psql -U postgres -d template1 -c "create database notarysigner;"
  $DOCKER_CMD exec harbor-db psql -U postgres -d template1 -c "create database notaryserver;"
}

restore_database() {
    $DOCKER_CMD exec harbor-db sh -c 'psql -U postgres registry < /backup/harbor/db/registry.back'
    $DOCKER_CMD exec harbor-db sh -c 'psql -U postgres postgres < /backup/harbor/db/postgres.back'
    $DOCKER_CMD exec harbor-db sh -c 'psql -U postgres notarysigner < /backup/harbor/db/notarysigner.back'
    $DOCKER_CMD exec harbor-db sh -c 'psql -U postgres notaryserver < /backup/harbor/db/notaryserver.back'
}

restore_registry() {
    cp -r harbor/registry/ ${HARBOR_DIR}/
    chown -R 10000 ${HARBOR_DIR}/registry
}

restore_redis() {
    cp -r harbor/redis/ ${HARBOR_DIR}/
    chown -R 999 ${HARBOR_DIR}/redis
}

restore_chartmuseum() {
    if [ -d ./harbor/chart_storage ]; then
        cp -r ./harbor/chart_storage/ ${HARBOR_DIR}/
        chown -R 10000 ${HARBOR_DIR}/chart_storage
    fi
}

restore_secret() {
    if [ -f harbor/secret/secretkey ]; then
        cp -f harbor/secret/secretkey ${HARBOR_DIR}/secretkey
    fi
    if [ -f harbor/secret/defaultalias ]; then
        cp -f harbor/secret/defaultalias ${HARBOR_DIR}/secretkey
    fi
    if [ -d harbor/secret/keys ]; then
        cp -r harbor/secret/keys/ ${HARBOR_DIR}/secret/
    fi
}

main() {
    if [ "$#" -ne 2 ]; then
		echo "Usage: $0 /path/to/tgz_file registry-ip"
        error_exit "Illegal number of parameters. You must pass tgz file path and registry ip"
    fi

    set -ex

	DOCKER_CMD=docker

	harbor_db_image=$($DOCKER_CMD images goharbor/harbor-db --format "{{.Repository}}:{{.Tag}}" | head -1)
	harbor_db_path="${HARBOR_DIR}/database"

	cd ${BACKUP_DIR}

  extract_backup
  launch_db
  wait_for_db_ready
  clean_database_data
  restore_database
#  restore_redis
  restore_registry
  restore_chartmuseum
  restore_secret
  clean_db

	echo "All Harbor data is restored"
}

main "${@}"