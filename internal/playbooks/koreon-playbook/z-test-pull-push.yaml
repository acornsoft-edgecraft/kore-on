---
- hosts: localhost
  gather_facts: false
  tasks:
    - name: Init | Configuration
      ansible.builtin.include_role:
        name: init
        apply:
          tags:
            - init
  any_errors_fatal: true

- hosts: prepare_airgap
  become: true
  vars_files:
    - "{{ playbook_dir }}/inventory/group_vars/basic.yaml"
    - "{{ playbook_dir }}/inventory/group_vars/expert.yaml"
  vars:
    registry_id: "admin"
    registry_passwd: "Pass0000@"
    basic_auth: "{{ registry_id }}:{{ registry_passwd }}"
    harbor_data_dir: "{{ prepare_airgap_registry_data_dir }}/harbor"
    _version: "{{ prepare_airgap_registry_version | split('.') | first }}"
    _url: "{{ (_version == 'v1') | ternary(prepare_airgap_registry_ip + '/api', prepare_airgap_registry_ip + '/api/' + _version + '.0') }}"
    prepare_airgap_images: [
      "docker.io/nginx:latest",
      "docker.io/haproxy:latest",
      "gcr.io/kubernetes-e2e-test-images/dnsutils:1.3",
      "k8s.gcr.io/pause:{{ image_pause_version | regex_replace('^v', '') }}",
      "docker.io/coredns/coredns:{{ image_coredns_version | regex_replace('^v', '') }}",
      "docker.io/calico/cni:{{ image_calico_version }}",
      "docker.io/calico/node:{{ image_calico_version }}",
      "docker.io/calico/kube-controllers:{{ image_calico_version }}",
      "docker.io/calico/typha:{{ image_calico_version }}",
      "docker.io/calico/pod2daemon-flexvol:{{ image_calico_version }}",
      "k8s.gcr.io/metrics-server/metrics-server:{{ image_metrics_server_version }}",
      "k8s.gcr.io/kube-apiserver:{{ prepare_airgap_k8s_version }}",
      "k8s.gcr.io/kube-controller-manager:{{ prepare_airgap_k8s_version }}",
      "k8s.gcr.io/kube-scheduler:{{ prepare_airgap_k8s_version }}",
      "k8s.gcr.io/kube-proxy:{{ prepare_airgap_k8s_version }}"
    ]

  tasks:
    - name: pull an image
      community.docker.docker_image:
        name: "{{ item }}"
        source: pull
      loop: "{{ prepare_airgap_images }}"

    - name: Create project
      ansible.builtin.uri:
        url: "https://{{ _url }}/projects"
        method: POST
        ca_path: "{{ harbor_data_dir }}/harbor/cert/ca.crt"
        headers:
          accept: application/json
          Content-Type: application/json
          Authorization: Basic {{ basic_auth | b64encode }}
        body_format: json
        body:
          project_name: "{{ item | split('/') | first }}"
          public: true
          storage_limit: -1
          metadata:
            public: "true"
      register: _result
      failed_when: false
      loop: "{{ prepare_airgap_images }}"

    - name: Docker login
      community.docker.docker_login:
        registry_url: "{{ prepare_airgap_registry_ip }}"
        username: "{{ registry_id }}"
        password: "{{ registry_passwd }}"
        reauthorize: True
      delegate_to: "{{ groups['prepare_airgap'][0] }}"

    - name: Tag and push to local registry
      community.docker.docker_image:
        name: "{{ item }}"
        repository: "{{ prepare_airgap_registry_ip + '/' + item }}"
        ca_cert: "{{ harbor_data_dir }}/cert/ca.crt"
        push: true
        source: local
      loop: "{{ prepare_airgap_images }}"
      delegate_to: "{{ groups['prepare_airgap'][0] }}"