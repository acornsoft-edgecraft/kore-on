#jinja2:variable_start_string:'[[' , variable_end_string:']]' , block_start_string:'[%' , block_end_string:'%]'
# kubernetes images and directories
kube_config_dir: /etc/kubernetes
manifest_config_dir: /etc/kubernetes/manifests
cert_dir: /etc/kubernetes/pki
master_cert_dir: /opt/kubernetes/pki
kube_addon_dir: /etc/kubernetes/addon
account_private_key: /etc/kubernetes/pki/sa.key
account_key: /etc/kubernetes/pki/sa.pub
ca_key: /etc/kubernetes/pki/ca.key
ca_cert: /etc/kubernetes/pki/ca.crt
api_key: /etc/kubernetes/pki/kube-apiserver.key
api_cert: /etc/kubernetes/pki/kube-apiserver.crt
api_kubelet_client_key: /etc/kubernetes/pki/apiserver-kubelet-client.key
api_kubelet_client_cert: /etc/kubernetes/pki/apiserver-kubelet-client.crt
proxy_ca_cert: /etc/kubernetes/pki/front-proxy-ca.crt
proxy_client_key: /etc/kubernetes/pki/front-proxy-client.key
proxy_client_cert: /etc/kubernetes/pki/front-proxy-client.crt
dashboard_cert: /etc/kubernetes/pki/dashboard.crt
dashboard_key: /etc/kubernetes/pki/dashboard.key
kubeadminconfig: /etc/kubernetes/admin.conf
# api_image: gcr.io/google_containers/kube-apiserver-amd64:{{ k8s_version }}
# controller_image: gcr.io/google_containers/kube-controller-manager-amd64:{{ k8s_version }}
# scheduler_image: gcr.io/google_containers/kube-scheduler-amd64:{{ k8s_version }}
auth_mode: Node,Rbac
audit_log_enable: true
encrypt_secret: true
kubernetes_service_ip: "{{ service_ip_range|ipaddr('net')|ipaddr(1)|ipaddr('address') }}"
dns_ip: "{{ service_ip_range|ipaddr('net')|ipaddr(10)|ipaddr('address') }}"
api_secure_port: 6443
api_insecure_port: 8080

# etcd certificate
etcd_peer_url_scheme: https
etcd_ca_file: /etc/kubernetes/pki/etcd/ca.crt
etcd_cert_file: /etc/kubernetes/pki/etcd/server.crt
etcd_key_file: /etc/kubernetes/pki/etcd/server.key
etcd_peer_ca_file: /etc/kubernetes/pki/etcd/ca.crt
etcd_peer_cert_file: /etc/kubernetes/pki/etcd/peer.crt
etcd_peer_key_file: /etc/kubernetes/pki/etcd/peer.key
etcd_healthcheck_cert_file: /etc/kubernetes/pki/etcd/healthcheck-client.crt
etcd_healthcheck_key_file: /etc/kubernetes/pki/etcd/healthcheck-client.key

# metrics-server certificate
metrics_server_cert_file: /etc/kubernetes/pki/metrics-server/tls.crt
metrics_server_key_file: /etc/kubernetes/pki/metrics-server/tls.key

# haproxy for internal loadbalancer
haproxy_dir: /etc/haproxy
haproxy_port: 6443
haproxy_health_check_port: 8081

# option for preparing local-repo and registry (do not modify when fully understand this flag)
archive_repo: false

# addons
metrics_server: true
addon_install: true
prometheus_rules_lang: ko
ingress: true
ingress_http_external_port: 30001
ingress_https_external_port: 30002
yum_proxy: ""

subscription_id: ""
client_id: ""
client_secret: ""
tenant_id: ""
resource_group: ""
location: local
vnet_name: ""
subnet_name: ""
security_group_name: ""
primary_availability_set_name: ""
route_table_name: ""
efs_file_system_id: ""
storage_account: ""
yum_kubernetes_url: ""
api_sans: []
single_volume_dir: ""
single_volume_size: 0
shared_volume_dir: ""
static_volume_dir: ""
cluster_type: small
base64_controller_secret: ""
base64_monitoring_secret: ""
base64_cluster_seq: ""
base64_cluster_id: ""
storage_class_name: default-storage
storage_type: nfs
sctp_support: false
multus_install: false
device_name: ""
device_ven: ""
device_dev: ""
device_driver: ""
ingress_type: Deployment
fs_type: xfs
mirror_count: 1
perf_tier: best-effort
volume_binding_mode: WaitForFirstConsumer
istio_install: false

dashboard_public_cert: false
ha_type: ""

# Get kubernetes major version (i.e. 1.20.2 => 1.20)
k8s_major_version: "{{ k8s_version | regex_replace('^v([0-9])+\\.([0-9]+)\\.[0-9]+', 'v\\1.\\2') }}"

kube_support_versions:
  [
    "v1.19.10",
    "v1.19.11",
    "v1.19.12",
    "v1.20.6",
    "v1.20.7",
    "v1.20.8",
    "v1.21.0",
    "v1.21.1",
    "v1.21.2"
  ]

kube_feature_gates: |-
    [
      "TTLAfterFinished=true"
      ,"RemoveSelfLink=false"
      {%- if sctp_support is defined and sctp_support -%}
      ,"SCTPSupport=true"
      {%- endif -%}
    ]

kubeproxy_feature_gates: |-
    [
      "TTLAfterFinished: true"
      {%- if sctp_support -%}
      , "SCTPSupport: true"
      {%- endif -%}
    ]
