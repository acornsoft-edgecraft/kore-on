#!/bin/bash

CURRENT_DATE=`date '+%Y%m%d'`
CURRENT_TIME=`date '+%Y%m%d_%H%M%S'`

K8S_VERIONS="-{{ prepare_airgap_k8s_version | regex_replace('^v', '') }}"
REPO_DIR="{{ package_data_dir }}"
PACKAGE_BASTION_DIR="{{ package_bastion_dir }}"
ARCHIVE_DIR="{{ package_archive_dir }}"

error_exit() {
    echo "error: ${1:-"unknown error"}" 1>&2
    exit 1
}

make_yum_repo(){
    cd "$REPO_DIR"

    yum clean all
    yum repolist
    yum -y install createrepo
    yum -y install yum-utils

    repoquery --qf=%{name} -g --list --grouppkgs=all [groups] | xargs repotrack -a x86_64 -p ./ createrepo
    repoquery --qf=%{name} -g --list --grouppkgs=all [groups] | xargs repotrack -p ./ yum-utils

    repoquery --qf=%{name} -g --list --grouppkgs=all [groups] | xargs repotrack -a x86_64 -p ./ jq
    repoquery --qf=%{name} -g --list --grouppkgs=all [groups] | xargs repotrack -p ././ nginx
    repoquery --qf=%{name} -g --list --grouppkgs=all [groups] | xargs repotrack -a x86_64 -p ./ telnet
    repoquery --qf=%{name} -g --list --grouppkgs=all [groups] | xargs repotrack -a x86_64 -p ./ net-tools
    repoquery --qf=%{name} -g --list --grouppkgs=all [groups] | xargs repotrack -a x86_64 -p ./ bind-utils
    repoquery --qf=%{name} -g --list --grouppkgs=all [groups] | xargs repotrack -a x86_64 -p ./ python3
    repoquery --qf=%{name} -g --list --grouppkgs=all [groups] | xargs repotrack -a x86_64 -p ./ audit

    repoquery --qf=%{name} -g --list --grouppkgs=all [groups] | xargs repotrack -a x86_64 -p ./ nfs-utils
    repoquery --qf=%{name} -g --list --grouppkgs=all [groups] | xargs repotrack -a x86_64 -p ./ nfs-server
    repoquery --qf=%{name} -g --list --grouppkgs=all [groups] | xargs repotrack -a x86_64 -p ./ lvm2
    repoquery --qf=%{name} -g --list --grouppkgs=all [groups] | xargs repotrack -a x86_64 -p ./ NetworkManager
    repoquery --qf=%{name} -g --list --grouppkgs=all [groups] | xargs repotrack -a x86_64 -p ./ ipvsadm
    repoquery --qf=%{name} -g --list --grouppkgs=all [groups] | xargs repotrack -a x86_64 -p ./ ipset
    repoquery --qf=%{name} -g --list --grouppkgs=all [groups] | xargs repotrack -a x86_64 -p ./ lksctp-tools
    repoquery --qf=%{name} -g --list --grouppkgs=all [groups] | xargs repotrack -a x86_64 -p ./ python3-libselinux
    repoquery --qf=%{name} -g --list --grouppkgs=all [groups] | xargs repotrack -a x86_64 -p ./ socat
    repoquery --qf=%{name} -g --list --grouppkgs=all [groups] | xargs repotrack -a x86_64 -p ./ conntrack-tools
    repoquery --qf=%{name} -g --list --grouppkgs=all [groups] --enablerepo=Docker-CE-Stable | xargs repotrack -a x86_64 -p ./ docker-ce docker-ce-cli

    repoquery --qf=%{name} -g --list --grouppkgs=all [groups] | xargs dnf install -y --downloadonly --enablerepo=Docker-CE-Stable --disableexcludes=Docker-CE-Stable --downloaddir=./ "{{ containerd_io }}"
    repoquery --qf=%{name} -g --list --grouppkgs=all [groups] | xargs dnf install -y --downloadonly --enablerepo=kubernetes --disableexcludes=kubernetes --downloaddir=./ kubectl${K8S_VERIONS} kubelet${K8S_VERIONS} kubeadm${K8S_VERIONS}

    createrepo .
}

make_yum_bastion(){
    cd "$PACKAGE_BASTION_DIR"

    repoquery --qf=%{name} -g --list --grouppkgs=all [groups] --enablerepo=Docker-CE-Stable | xargs repotrack -a x86_64 -p ./ docker-ce docker-ce-cli
    repoquery --qf=%{name} -g --list --grouppkgs=all [groups] | xargs repotrack -a x86_64 -p ./ audit
    createrepo .
}

create_tarball() {
 	cd $REPO_DIR
    tar --exclude archive -zcvf $ARCHIVE_DIR/local-repo-"{{prepare_airgap_k8s_version}}"-$CURRENT_TIME.tgz ./
}

create_bastion_tarball() {
 	cd "$PACKAGE_BASTION_DIR"
    tar --exclude archive -zcvf $ARCHIVE_DIR/bastion-package-$CURRENT_TIME.tgz ./
}


main() {

    for var in `grep -ri "ID" /etc/os-release`
    do
    KEY=$(echo $var | cut -f1 -d=)
    VALUE=$(echo $var | cut -f2 -d= | sed 's/\"//g;s/platform\://')

    case "$KEY" in
        ID)                 ID=${VALUE} ;;
        ID_LIKE)            ID_LIKE=${VALUE} ;;
        VERSION_ID)         VERSION_ID=${VALUE} ;;
        PLATFORM_ID)        PLATFORM_ID=${VALUE} ;;
        *)
    esac
    done

    if [ "$ID" == "centos" ]; then
        make_yum_repo
        make_yum_bastion
    fi

    if [ "$ID" == "rhel" ]; then
        make_yum_repo
        make_yum_bastion
    fi

    create_tarball
    create_bastion_tarball

    echo "Completed"
}

main "${@}"