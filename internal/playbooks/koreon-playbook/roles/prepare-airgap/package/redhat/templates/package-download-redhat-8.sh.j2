#!/bin/bash

CURRENT_DATE=`date '+%Y%m%d'`
CURRENT_TIME=`date '+%Y%m%d_%H%M%S'`

K8S_VERIONS="-{{ prepare_airgap_k8s_version | regex_replace('^v', '') }}"
REPO_DIR="{{ package_data_dir }}"
PACKAGE_BASTION_DIR="{{ package_bastion_dir }}"
ARCHIVE_DIR="{{ package_archive_dir }}"

error_exit() {
    echo "error: ${1:-"unknown error"}" 1>&2
    exit 1
}

make_yum_repo(){
    cd "$REPO_DIR"

    dnf clean all
    dnf repolist
    dnf -y install createrepo
    dnf -y install yum-utils

    dnf -y download --resolve --arch x86_64  --downloaddir=./ createrepo
    dnf -y download --resolve --downloaddir=./ yum-utils

    dnf -y download --resolve --arch x86_64 --downloaddir=./ jq
    dnf -y download --resolve --alldeps --downloaddir=./ nginx
    dnf -y download --resolve --arch x86_64 --downloaddir=./ telnet
    dnf -y download --resolve --arch x86_64 --downloaddir=./ net-tools
    dnf -y download --resolve --arch x86_64 --downloaddir=./ bind-utils
    dnf -y download --resolve --alldeps --arch x86_64 --downloaddir=./ python3
    dnf -y download --resolve --arch x86_64 --downloaddir=./ audit

    dnf -y download --resolve --arch x86_64 --downloaddir=./ nfs-utils
    dnf -y download --resolve --arch x86_64 --downloaddir=./ nfs-server
    dnf -y download --resolve --arch x86_64 --downloaddir=./ lvm2
    dnf -y download --resolve --arch x86_64 --downloaddir=./ NetworkManager
    dnf -y download --resolve --arch x86_64 --downloaddir=./ ipvsadm
    dnf -y download --resolve --arch x86_64 --downloaddir=./ ipset
    dnf -y download --resolve --arch x86_64 --downloaddir=./ lksctp-tools
    dnf -y download --resolve --arch x86_64 --downloaddir=./ python3-libselinux
    dnf -y download --resolve --arch x86_64 --downloaddir=./ socat
    dnf -y download --resolve --arch x86_64 --downloaddir=./ conntrack-tools
    dnf -y download --resolve --alldeps --enablerepo=Docker-CE-Stable --arch x86_64 --downloaddir=./ docker-ce docker-ce-cli

    dnf -y download --resolve --alldeps --arch x86_64 --downloaddir=./ --disableexcludes=Docker-CE-Stable "{{ containerd_io }}"
    dnf -y download --resolve --alldeps --arch x86_64 --downloaddir=./ --disableexcludes=kubernetes kubectl${K8S_VERIONS} kubelet${K8S_VERIONS} kubeadm${K8S_VERIONS}

    createrepo .

    curl -O http://mirror.centos.org/centos/8-stream/AppStream/x86_64/os/Packages/modulemd-tools-0.7-4.el8.noarch.rpm
    dnf -y install modulemd-tools-0.7-4.el8.noarch.rpm

    repo2module  -s stable -d . modules.yaml

    modifyrepo_c --mdtype=modules modules.yaml repodata/
}

make_yum_bastion(){
    cd "$PACKAGE_BASTION_DIR"

    dnf -y download --resolve --alldeps --enablerepo=Docker-CE-Stable --arch x86_64 --downloaddir=./ docker-ce docker-ce-cli
    dnf -y download --resolve --arch x86_64 --downloaddir=./ audit
    createrepo .
    
    repo2module  -s stable -d . modules.yaml

    modifyrepo_c --mdtype=modules modules.yaml repodata/
}

create_tarball() {
 	cd $REPO_DIR
    tar --exclude archive -zcvf $ARCHIVE_DIR/local-repo-"{{prepare_airgap_k8s_version}}"-$CURRENT_TIME.tgz ./
}

create_bastion_tarball() {
 	cd "$PACKAGE_BASTION_DIR"
    tar --exclude archive -zcvf $ARCHIVE_DIR/bastion-package-$CURRENT_TIME.tgz ./
}

main() {

    for var in `grep -ri "ID" /etc/os-release`
    do
    KEY=$(echo $var | cut -f1 -d=)
    VALUE=$(echo $var | cut -f2 -d= | sed 's/\"//g;s/platform\://')

    case "$KEY" in
        ID)                 ID=${VALUE} ;;
        ID_LIKE)            ID_LIKE=${VALUE} ;;
        VERSION_ID)         VERSION_ID=${VALUE} ;;
        PLATFORM_ID)        PLATFORM_ID=${VALUE} ;;
        *)
    esac
    done

    if [ "$ID" == "centos" ]; then
        make_yum_repo
        make_yum_bastion
    fi

    if [ "$ID" == "rhel" ]; then
        make_yum_repo
        make_yum_bastion
    fi

    create_tarball
    create_bastion_tarball

    echo "Completed"
}

main "${@}"