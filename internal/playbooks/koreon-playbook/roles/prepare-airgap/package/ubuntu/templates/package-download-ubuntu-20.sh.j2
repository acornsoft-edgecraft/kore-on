#jinja2:comment_start_string:'[#' , comment_end_string:'#]'
#!/bin/bash

CURRENT_DATE=`date '+%Y%m%d'`
CURRENT_TIME=`date '+%Y%m%d_%H%M%S'`

K8S_VERIONS="{{ prepare_airgap_k8s_version | regex_replace('^v', '') }}-00"
CONTAINERD_VERSION="{{ containerd_io }}"
REPO_DIR="{{ package_data_dir }}"
PACKAGE_BASTION_DIR="{{ package_bastion_dir }}"
ARCHIVE_DIR="{{ package_archive_dir }}"

error_exit() {
    echo "error: ${1:-"unknown error"}" 1>&2
    exit 1
}

function is_resolved() {
  if [ ${#RESOLVED[@]} -eq 0 ]; then
    return 0
  fi

  for PACKAGE in ${RESOLVED[@]};
  do
    if [ "$PACKAGE" = "$1" ]; then
      return 1
    fi
  done
}

function resolve_recursion() {
  echo $1
  if ! is_resolved $1 || [[ -z "$2" ]]; then
    GET=$(apt-cache depends --recurse --no-recommends --no-suggests --no-conflicts --no-breaks --no-replaces --no-enhances --no-pre-depends $1 | awk '/Depends:/ {print $2}')
    while IFS= read line;
    do
     echo $line
       [ -z "$line" ] && continue
       if ! is_resolved $line; then
         resolve_recursion $line recursion
       fi
    done <<< "$GET"
  fi

  RESOLVED+=("$1")
}

make_apt_repo(){
    cd "$REPO_DIR"

    apt-get update -y

    (
    resolve_recursion containerd.io=${CONTAINERD_VERSION}

    resolve_recursion kubelet=${K8S_VERIONS}
    resolve_recursion kubeadm=${K8S_VERIONS}
    resolve_recursion kubectl=${K8S_VERIONS}

    resolve_recursion docker-ce
    resolve_recursion docker-ce-cli
    resolve_recursion docker-compose-plugin

    resolve_recursion nvidia-container-toolkit

    resolve_recursion nginx

    resolve_recursion jq
    resolve_recursion ipvsadm
    resolve_recursion ipset
    resolve_recursion audit
    resolve_recursion python3
    resolve_recursion wget
    resolve_recursion libonig2
    resolve_recursion telnet
    resolve_recursion vim
    resolve_recursion curl
    resolve_recursion net-tools
    resolve_recursion nfs-kernel-server
    resolve_recursion nfs-server
    resolve_recursion libnfsidmap2
    resolve_recursion libtirpc3
    resolve_recursion rpcbind
    resolve_recursion keyutils
    resolve_recursion libtirpc-common
    resolve_recursion dnsutils
    resolve_recursion dpkg-dev
    resolve_recursion tcpdump

    resolve_recursion conntrack
    resolve_recursion ebtables
    resolve_recursion iproute2
    resolve_recursion util-linux
    resolve_recursion udev
    resolve_recursion ethtool

    ) | sed -E 's#(<|>)##g' | sort -u | while read line; do

    echo "Downloading $line"
    status=0
    apt-get install -y --download-only --reinstall --allow-downgrades --allow-change-held-packages -o Dir::cache=$REPO_DIR -o Dir::Cache::archives="./" $line || ((status=$?))
    if [ $status -eq 0 ]; then
    echo "OK."
    else
    echo "Failed $line"

    FLAG_ON=
    APT_PRINT=$(apt-get install -y --download-only --reinstall --allow-downgrades --allow-change-held-packages -o Dir::cache=$REPO_DIR -o Dir::Cache::archives="./" $line 2>&1 || true)
    while read lineapt;
    do

        if [[ "$lineapt" =~ by:$ ]]; then
        FLAG_ON=1
        continue
        fi

        if [ ! -z "$FLAG_ON" ]; then
        LINE_PURE=$(echo $lineapt | sed 's#^\s+##')
        APT_PACK_NAME=$(echo $LINE_PURE | awk '{print $1}')
        APT_PACK_VER=$(echo $LINE_PURE | awk '{print $2}')
        echo "It's downloading $APT_PACK_NAME=$APT_PACK_VER"
        apt-get install -y --download-only --reinstall --allow-downgrades --allow-change-held-packages -o Dir::cache=$REPO_DIR -o Dir::Cache::archives="./" $APT_PACK_NAME=$APT_PACK_VER
        break
        fi

    done <<< "$APT_PRINT"

    fi

    done
    
    apt-get install -y dpkg-dev

    rm -rf lock partial pkgcache.bin srcpkgcache.bin Packages.gz

    dpkg-scanpackages -m . | gzip -9c > Packages.gz
}

make_apt_bastion(){
    cd "$PACKAGE_BASTION_DIR"

    apt-get install -y --download-only --reinstall --allow-downgrades --allow-change-held-packages -o Dir::cache=$REPO_DIR -o Dir::Cache::archives="./" docker-ce

    rm -rf lock partial pkgcache.bin srcpkgcache.bin Packages.gz Packages
    dpkg-scanpackages -m . > Packages
}

create_tarball() {
 	cd $REPO_DIR
    tar --exclude archive -zcvf $ARCHIVE_DIR/local-repo-"{{prepare_airgap_k8s_version}}"-$CURRENT_TIME.tgz ./
}

create_bastion_tarball() {
 	cd "$PACKAGE_BASTION_DIR"
    tar --exclude archive -zcvf $ARCHIVE_DIR/bastion-package-$CURRENT_TIME.tgz ./
}

main() {
set -e

RESOLVED=()

    for var in `grep -ri "ID" /etc/os-release`
    do
    KEY=$(echo $var | cut -f1 -d=)
    VALUE=$(echo $var | cut -f2 -d= | sed 's/\"//g;s/platform\://')

    case "$KEY" in
        ID)                 ID=${VALUE} ;;
        ID_LIKE)            ID_LIKE=${VALUE} ;;
        VERSION_ID)         VERSION_ID=${VALUE} ;;
        PLATFORM_ID)        PLATFORM_ID=${VALUE} ;;
        *)
    esac
    done

    if [ "$ID" == "centos" ]; then
        make_yum_repo
    fi

    if [ "$ID" == "rhel" ]; then
        make_yum_repo
    fi

    if [ "$ID" == "ubuntu" ]; then
        make_apt_repo
        make_apt_bastion
    fi

    create_tarball
    create_bastion_tarball

    echo "Completed"
}

main "${@}"