---
# Create Registry directory
- name: Registry | Create registry directory
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ install_dir }}/harbor"
    - "{{ install_dir }}/cert"
    - "{{ registry_data_dir }}/cert"
    - "/etc/docker/certs.d/{{ registry_domain }}"

# download harbor offline installer
- name: Download offline installer
  ansible.builtin.get_url:
    url: "https://github.com/goharbor/harbor/releases/download/{{ harbor_version }}/harbor-offline-installer-{{ harbor_version }}.tgz"
    dest: "{{ harbor_data_dir }}/{{ harbor_offline_file }}"
  any_errors_fatal: true

# Upload harbor offline installer and extract it when not exist
- name: Check harbor tgz existence
  stat:
    path: "{{ harbor_data_dir }}/{{ harbor_offline_file }}"
  register: harbor_tgz_stat

- name: Unarchive harbor offline installer and extract it
  ansible.builtin.unarchive:
    src: "{{ harbor_data_dir }}/{{ harbor_offline_file }}"
    dest: "{{ install_dir }}"
    remote_src: True
  any_errors_fatal: true

# Download docker-compose binary
- name: Download docker-compose binary
  ansible.builtin.get_url:
    url: https://github.com/docker/compose/releases/download/{{ package_docker_compose_version }}/docker-compose-linux-x86_64
    dest: /usr/local/bin/docker-compose
    mode: "0755"
    owner: "root"
    group: "root"

- name: Create docker-compose symbolic link
  file:
    src: /usr/local/bin/docker-compose
    dest: /usr/bin/docker-compose
    state: link

# Create ssl certification files for harbor if not exist
- name: Copy registry openssl conf file to create certificate
  template:
    src: "openssl.conf.j2"
    dest: "{{ harbor_cert_work_dir }}/openssl.conf"
  register: ssl_config

- name: Check registry private ca file existence
  stat:
    path: "{{ harbor_cert_dir }}/ca.crt"
  when: 
    - not registry_public_cert
  register: registry_ca_stat

- name: Create registry private certificate
  shell: "{{ item }}"
  no_log: true
  with_items:
    - "openssl genrsa -out {{ harbor_cert_work_dir }}/ca.key 2048"
    - "openssl req -x509 -new -nodes -key {{ harbor_cert_work_dir }}/ca.key -days {{ cert_validity_days }} -out {{ harbor_cert_dir }}/ca.crt -subj '/CN=harbor-ca' -extensions v3_ca -config {{ harbor_cert_work_dir }}/openssl.conf"
    - "openssl genrsa -out {{ harbor_cert_dir }}/harbor.key 2048"
    - "openssl req -new -key {{ harbor_cert_dir }}/harbor.key -subj '/CN=harbor' |
      openssl x509 -req -CA {{ harbor_cert_dir }}/ca.crt -CAkey {{ harbor_cert_work_dir }}/ca.key -CAcreateserial -out {{ harbor_cert_dir }}/harbor.crt -days {{ cert_validity_days }} -extensions v3_req_server -extfile {{ harbor_cert_work_dir }}/openssl.conf"
  register: registry_cert
  when: 
   - not registry_public_cert and not registry_ca_stat.stat.exists

- name: Copy registry public certificate file
  copy:
    src: "{{ playbook_dir }}/{{ item.src }}"
    dest: "{{ harbor_cert_dir }}/{{ item.dest }}"
  with_items:
    - { src: "{{ playbook_dir }}/download/{{ registry_ssl_cert }}", dest: "harbor.crt" }
    - { src: "{{ playbook_dir }}/download/{{ registry_ssl_cert_key }}", dest: "harbor.key" }
  when: 
    - registry_public_cert

- name: Copy harbor.yml file
  template:
    src: >-
      {% if harbor_version is version('v2.2.1', '<=') -%}
      harbor.yml.j2
      {%- else -%}
      harbor2.yml.j2
      {%- endif %}
    dest: "{{ harbor_install_dir }}/harbor.yml"

# Install harbor
- name: Populate service facts
  ansible.builtin.service_facts:

- name: Run harbor befor docker running check
  ansible.builtin.systemd:
    name: docker
    state: started
  register: result
  until: "result is not failed"
  retries: 5
  delay: 10
  when:
    - not ansible_facts.services["docker.service"].state in "running"

- name: Run harbor install script
  ansible.builtin.shell: >-
    ./install.sh
    {% if harbor_version is version('v2.2.1', '<=') -%}
    --with-clair
    {%- else %}
    --with-trivy
    {%- endif %}
    --with-chartmuseum > {{ harbor_install_dir }}/harbor-install.log
  args:
    chdir: "{{ harbor_install_dir }}"

- name: "Copy ca.crt file to /etc/docker/certs.d/{{ registry_domain }}"
  when: not registry_public_cert
  copy:
    src: "{{ harbor_cert_dir }}/ca.crt"
    dest: "/etc/docker/certs.d/{{ registry_domain }}"
    remote_src: yes

- stat:
    path: "{{ harbor_install_dir }}/common/config/nginx/cert/ca.crt"
  register: nginx_ca_stat

- name: Create nginx cert directory
  when: not registry_public_cert and not nginx_ca_stat.stat.exists
  file:
    path: "{{ harbor_install_dir }}/common/config/nginx/cert"
    state: directory

- name: Copy ca.crt to harbor nginx conf dir
  when: not registry_public_cert and not nginx_ca_stat.stat.exists
  copy:
    src: "{{ harbor_cert_dir }}/ca.crt"
    dest: "{{ harbor_install_dir }}/common/config/nginx/cert/ca.crt"
    remote_src: yes

- name: Add nginx location for ca.crt download
  when: not registry_public_cert and not nginx_ca_stat.stat.exists
  blockinfile:
    path: "{{ harbor_install_dir }}/common/config/nginx/nginx.conf"
    insertafter: "chunked_transfer_encoding on;"
    marker: "## {mark} added by kore-on --------------------"
    block: |
          location /ca.crt {
            alias /etc/nginx/cert/ca.crt;
          }

- name: Reload nginx configuration
  when: not registry_public_cert and not nginx_ca_stat.stat.exists
  shell: "docker-compose exec -T proxy nginx -s reload"
  args:
    chdir: "{{ harbor_install_dir }}"
