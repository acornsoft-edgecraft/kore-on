---
- name: Check if kubeadm has already run
  stat:
    path: "{{ cert_dir }}/apiserver.crt"
  register: kubeadm_apiserver_crt

# For ubuntu     -------------------------------------------------------------
- name: Unhold Kubernetes packages (ubuntu)
  when: ansible_os_family in ["Ubuntu", "Debian"]
  dpkg_selections:
    name: "kubeadm"
    selection: install
  failed_when: false

- name: Install Kubernetes packages (kubectl, kubelet)
  when: ansible_os_family in ["Ubuntu", "Debian"]
  apt:
    name: "kubeadm={{ k8s_version }}-00"
    state: present

- name: Prevent auto-upgrade Kubernetes packages
  when: ansible_os_family in ["Ubuntu", "Debian"]
  dpkg_selections:
    name: "kubeadm"
    selection: hold
# ----------------------------------------------------------------------------

# For Centos     -------------------------------------------------------------
- name: Install Kubernetes packages (kubectl, kubelet)
  when:
    - ansible_distribution in ["CentOS", "RedHat"]
    - not closed_network
  yum:
    name: "kubeadm-{{ k8s_version }}"
    state: present
    update_cache: yes
    disable_excludes: Kubernetes

- name: Install Kubernetes packages (kubectl, kubelet)
  when:
    - ansible_distribution in ["CentOS", "RedHat"]
    - closed_network
  yum:
    name: "kubeadm-{{ k8s_version }}"
    state: present
    update_cache: yes
# ----------------------------------------------------------------------------

#- name: Get kubeadm binary
#  when:
#    - not closed_network
#  get_url:
#    url: https://dl.k8s.io/release/v{{ k8s_version }}/bin/linux/amd64/kubeadm
#    dest: /tmp/kubeadm_{{ k8s_version }}
#    mode: 0755
#
#- name: Get kubeadm binary(yum)
#  when:
#    - closed_network
#  get_url:
#    url: "{{ local_repository }}/release/v{{ k8s_version }}/bin/linux/amd64/kubeadm"
#    dest: /tmp/kubeadm_{{ k8s_version }}
#    mode: 0755
#
#- name: Copy kubeadm binary to /usr/bin
#  copy:
#    src: /tmp/kubeadm_{{ k8s_version }}
#    dest: /usr/bin/kubeadm
#    mode: 0755
#    backup: true
#    remote_src: yes
#  become: yes

- name: Copy kubeadm conf file
  when: inventory_hostname in groups['masters']
  template:
    src: "kubeadm.yaml.j2"
    dest: "{{ kube_config_dir }}/kubeadm.yaml"

- name: kubeadm | upgrage kubernetes cluster
  import_tasks: kubeadm-upgrade.yml

- name: Unhold Kubernetes packages (ubuntu)
  when: ansible_os_family in ["Ubuntu", "Debian"]
  dpkg_selections:
    name: "{{ item }}"
    selection: install
  with_items:
    - kubectl
    - kubelet

- name: Update Kubernetes packages (kubectl, kubelet)
  when: ansible_os_family in ["Ubuntu", "Debian"]
  apt:
    name: ['kubectl={{ k8s_version }}-00', 'kubelet={{ k8s_version }}-00']
    update_cache: yes
    only_upgrade: yes
  register: masterpackage
  tags: masterpackage

- name: Prevent auto-upgrade Kubernetes packages
  when: ansible_os_family in ["Ubuntu", "Debian"]
  dpkg_selections:
    name: "{{ item }}"
    selection: hold
  with_items:
    - kubectl
    - kubelet

- name: Update Kubernetes packages (kubectl, kubelet)
  when: ansible_os_family in ["CentOS", "RedHat"]
  yum:
    name: ['kubectl-{{ k8s_version }}', 'kubelet-{{ k8s_version }}']
    state: present
    update_cache: yes
    disable_excludes: Kubernetes
  register: masterpackage
  tags: masterpackage

- name: Copy kubelet extra config file(master)
  when: inventory_hostname in groups['masters']
  template:
    src: "kubeadm.kubelet.j2"
    dest: >-
      {% if ansible_os_family in ["Ubuntu", "Debian"] -%}
      /etc/default/kubelet
      {%- elif ansible_os_family in ["CentOS", "RedHat"] -%}
      /etc/sysconfig/kubelet
      {%- endif %}
    owner: root
    group: root
    mode: 0755
  register: kubelet_service

- name: Copy kubelet extra config file(node)
  when: inventory_hostname not in groups['masters']
  template:
    src: "kubeadm.kubelet.node.j2"
    dest: >-
      {% if ansible_os_family in ["Ubuntu", "Debian"] -%}
      /etc/default/kubelet
      {%- elif ansible_os_family in ["CentOS", "RedHat"] -%}
      /etc/sysconfig/kubelet
      {% endif %}
    owner: root
    group: root
    mode: 0755
  register: kubelet_service

- name: systemctl daemon-reload
  when: inventory_hostname not in groups['masters']
  systemd:
    daemon_reload: yes

- name: Restart kubelet
  when: inventory_hostname not in groups['masters']
  systemd:
    name: kubelet
    state: restarted

- name: Restart kube-proxy
  when: inventory_hostname in groups['masters']
  shell: "kubectl --kubeconfig={{ kubeadminconfig }} delete pod --grace-period=0 --force -n kube-system -l k8s-app=kube-proxy"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  ignore_errors: true

- name: Update kubeadm.yaml
  when: inventory_hostname in groups['masters']
  lineinfile:
    path: "{{ item }}"
    regexp: "^kubernetesVersion"
    line: "kubernetesVersion: {{ k8s_version }}"
  with_items:
    - /etc/kubernetes/kubeadm.yaml

# Calico ------------------------------------------------------------------
- name: Calico | Copy calico config file
  template:
    src: "{{ item.src }}"
    dest: "{{ kube_addon_dir }}/{{ item.dest }}"
  with_items:
  - { src: "calico/calico-{{calico_version}}.yaml.j2", dest: "calico/calico.yaml" }
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true

- name: Calico | Create calico
  shell: "kubectl apply --kubeconfig={{ kubeadminconfig }} -f {{ kube_addon_dir }}/{{ item }}"
  with_items:
  - "calico/calico.yaml"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
# ---------------------------------------------------------------------------