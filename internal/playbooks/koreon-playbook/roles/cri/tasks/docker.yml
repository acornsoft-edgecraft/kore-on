---
- name: Create docker config directory
  file:
    path: /etc/docker
    state: directory

- name: Check data directory existence
  stat:
    path: "{{ data_root_dir }}"
  register: data_dir_exist

- name: Create data directory existence
  when: not data_dir_exist.stat.exists
  file:
    path: "{{ data_root_dir }}"
    state: directory

# Install docker package  --------------------------------------------------
# For ubuntu
- name: Install Docker (Ubuntu, Debian)
  when: ansible_os_family in ["Ubuntu", "Debian"]
  apt:
    name: ['containerd.io=1.4.3-2', 'docker-ce=5:19.03.15~3-0~ubuntu-{{ ansible_distribution_release }}', 'docker-ce-cli=5:19.03.15~3-0~ubuntu-{{ ansible_distribution_release }}']
    state: present

- name: Hold docker version  (Ubuntu, Debian)
  when: ansible_os_family in ["Ubuntu", "Debian"]
  dpkg_selections:
    name: docker-ce
    selection: hold

# For Centos
# yum repository에 enabled=no로 되어 있으므로 enablerepo=Docker-CE-Stable 로 활성화 한다.
# disable_gpg_check=yes 로 설정하여 GPG key 정확성을 check하는 인터렉션을 방지한다.
- name: yum clean packages
  command: yum clean packages
  ignore_errors: true
  when:
    - ansible_distribution in ["CentOS", "RedHat"]

- name: Install Docker (Centos, RedHat)
  when:
    - ansible_distribution in ["CentOS", "RedHat"]
    - closed_network
  yum:
    name: ['docker-ce-19.03.15', 'docker-ce-cli-19.03.15']
    state: present
    update_cache: yes
    disable_gpg_check: yes

- name: Install Docker (Centos, RedHat)
  yum:
    name: ['docker-ce-19.03.15', 'docker-ce-cli-19.03.15']
    state: present
    enablerepo: Docker-CE-Stable
    disable_gpg_check: yes
  when:
    - ansible_distribution in ["CentOS", "RedHat"]
    - not closed_network

# If GPU node  -------------------------------------------------------------
#  Refer to https://nvidia.github.io/nvidia-docker/

# Debian-based distributions
#  curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -
#  distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
#  curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | tee /etc/apt/sources.list.d/nvidia-docker.list
#  apt-get update

- name: Get distribution id, versionid
  when:
    - not closed_network
    - is_gpu_node
  shell: source /etc/os-release;echo $ID$VERSION_ID
  register: os_distribution

- name: Add Nvidia-docker APT GPG key (Ubuntu, Debian)
  when:
    - ansible_os_family in ["Ubuntu", "Debian"]
    - not closed_network
    - is_gpu_node
  apt_key:
    url: https://nvidia.github.io/nvidia-docker/gpgkey
    state: present

- name: Add Nvidia-docker repository (Ubuntu, Debian)
  when:
    - ansible_os_family in ["Ubuntu", "Debian"]
    - not closed_network
    - is_gpu_node
  get_url:
    url: "https://nvidia.github.io/nvidia-docker/{{ os_distribution.stdout }}/nvidia-docker.list"
    dest: "/etc/apt/sources.list.d/nvidia-docker.list"
    mode: 0644
    owner: root
    group: root

- name: Install nvidia-docker2 (Ubuntu, Debian)
  when:
    - ansible_os_family in ["Ubuntu", "Debian"]
    - is_gpu_node
  apt:
    name: nvidia-docker2
    state: present
    update_cache: true

- name: Hold nvidia-docker2 version (Ubuntu, Debian)
  when:
    - ansible_os_family in ["Ubuntu", "Debian"]
    - is_gpu_node
  dpkg_selections:
    name: nvidia-docker2
    selection: hold

# RHEL-based distributions
#  distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
#  curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.repo | sudo tee /etc/yum.repos.d/nvidia-docker.repo
- name: Add Nvidia-docker repository (Centos, RedHat, Amazon)
  when:
    - ansible_distribution in ["CentOS", "RedHat", "Amazon"]
    - not closed_network
    - is_gpu_node
  get_url:
    url: "https://nvidia.github.io/nvidia-docker/{{ os_distribution.stdout }}/nvidia-docker.repo"
    dest: "/etc/yum.repos.d/nvidia-docker.repo"
    mode: 0644
    owner: root
    group: root

- name: Install nvidia-docker2 (Centos, RedHat, Amazon)
  when:
    - ansible_distribution in ["CentOS", "RedHat", "Amazon"]
    - is_gpu_node
  yum:
    name: nvidia-docker2
    state: present
    update_cache: yes
#------------------------------------------------------------------------------

# Set docker root dir and configuration   ------------------------------------------------
- name: Copy daemon.json file to /etc/docker
  template:
    src: "{{ item.src }}"
    dest: /etc/docker/{{ item.dest }}
  with_items:
    - { src: "daemon.json.j2", dest: "daemon.json" }
  register: docker_daemon_json
# ---------------------------------------------------------------------------------------

- name: Enable Docker
  systemd:
    name: docker
    daemon_reload: yes
    enabled: yes

- name: Restart Docker
  when: docker_daemon_json.changed
  systemd:
    name: docker
    state: restarted
