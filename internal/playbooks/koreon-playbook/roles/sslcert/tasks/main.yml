---
- name: Create ssl cert dir
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ master_cert_dir }}/etcd"
    - "{{ cert_dir }}/metrics-server"
  register: master_ssl_dir

- name: Copy openssl conf file to create certificate
  template:
    src: "common-openssl.conf.j2"
    dest: "{{ master_cert_dir }}/common-openssl.conf"

- stat:
    path: "{{ master_cert_dir }}/ca.key"
  register: ca_key_stat

- stat:
    path: "{{ master_cert_dir }}/etcd/ca.key"
  register: etcd_ca_key_stat

- stat:
    path: "{{ cert_dir }}/metrics-server/apiextca.key"
  register: metrics_server_ca_key_stat

- name: Create kubernetes certificates
  when: not ca_key_stat.stat.exists
  shell: "{{ item }}"
  no_log: true
  with_items:
    - "openssl genrsa -out {{ master_cert_dir }}/ca.key 2048"
    - "openssl req -x509 -new -nodes -key {{ master_cert_dir }}/ca.key -days {{ cert_validity_days }} -out {{ master_cert_dir }}/ca.crt -subj '/CN=kubernetes-ca' -extensions v3_ca -config {{ master_cert_dir }}/common-openssl.conf"

    - "openssl genrsa -out {{ master_cert_dir }}/sa.key 2048"
    - "openssl rsa -in {{ master_cert_dir }}/sa.key -outform PEM -pubout -out {{ master_cert_dir }}/sa.pub"

    - "openssl req -new -key {{ master_cert_dir }}/sa.key -subj '/CN=system:kube-controller-manager' |
      openssl x509 -req -CA {{ master_cert_dir }}/ca.crt -CAkey {{ master_cert_dir }}/ca.key -CAcreateserial -out {{ master_cert_dir }}/sa.crt -days {{ cert_validity_days }} -extensions v3_req_client -extfile {{ master_cert_dir }}/common-openssl.conf"

    - "openssl genrsa -out {{ master_cert_dir }}/front-proxy-ca.key 2048"
    - "openssl req -x509 -new -nodes -key {{ master_cert_dir }}/front-proxy-ca.key -days {{ cert_validity_days }} -out {{ master_cert_dir }}/front-proxy-ca.crt -subj '/CN=front-proxy-ca' -extensions v3_ca -config {{ master_cert_dir }}/common-openssl.conf"

- name: Create etcd certificate
  when: etcd_peer_url_scheme == 'https' and not etcd_ca_key_stat.stat.exists
  shell: "{{ item }}"
  no_log: true
  with_items:
    - "openssl genrsa -out {{ master_cert_dir }}/etcd/ca.key 2048"
    - "openssl req -x509 -new -nodes -key {{ master_cert_dir }}/etcd/ca.key -days {{ cert_validity_days }} -out {{ master_cert_dir }}/etcd/ca.crt -subj '/CN=etcd-ca' -extensions v3_ca -config {{ master_cert_dir }}/common-openssl.conf"

    - "openssl genrsa -out {{ master_cert_dir }}/apiserver-etcd-client.key 2048"
    - "openssl req -new -key {{ master_cert_dir }}/apiserver-etcd-client.key -subj '/O=system:masters/CN=kube-apiserver-etcd-client' |
      openssl x509 -req -CA {{ master_cert_dir }}/etcd/ca.crt -CAkey {{ master_cert_dir }}/etcd/ca.key -CAcreateserial -out {{ master_cert_dir }}/apiserver-etcd-client.crt -days {{ cert_validity_days }} -extensions v3_req_client -extfile {{ master_cert_dir }}/common-openssl.conf"
{# 
- name: Create private key with password protection
  community.crypto.openssl_privatekey:
    path: "{{ cert_dir }}/metrics-server/apiextca.key"
    # passphrase: "{{ secret_ca_passphrase }}"
    mode: "640"
    size: "{{ key_size }}"
    type: "{{ key_type }}"
    backup: yes
  register: privatekey
  when: not metrics_server_ca_key_stat.stat.exists

- name: Create certificate signing request (CSR) for CA certificate
  community.crypto.openssl_csr:
    path: "{{ cert_dir }}/metrics-server/apiextca.csr"
    privatekey_path: "{{ privatekey.filename }}"
    # privatekey_passphrase: "{{ secret_ca_passphrase }}"
    common_name: "extension-api-servers-ca"
    use_common_name_for_san: false  # since we do not specify SANs, don't use CN as a SAN
    mode: "640"
    basic_constraints:
      - 'CA:TRUE'
    basic_constraints_critical: yes
    key_usage:
      - keyCertSign
    key_usage_critical: true
  when: not metrics_server_ca_key_stat.stat.exists

- name: Create self-signed CA certificate from CSR
  community.crypto.x509_certificate:
    path: "{{ cert_dir }}/metrics-server/apiextca.crt"
    csr_path: "{{ cert_dir }}/metrics-server/apiextca.csr"
    privatekey_path: "{{ cert_dir }}/metrics-server/apiextca.key"
    # privatekey_passphrase: "{{ secret_ca_passphrase }}"
    provider: selfsigned
    selfsigned_not_after: "+{{cert_validity_days}}d"
    mode: "644"
  when: not metrics_server_ca_key_stat.stat.exists

- name: Create private key with password protection
  community.crypto.openssl_privatekey:
    path: "{{ cert_dir }}/metrics-server/metrics-server.key"
    # passphrase: None
    mode: "640"
    size: "{{ key_size }}"
    type: "{{ key_type }}"
    backup: yes
  
- name: Create certificate signing request (CSR) for new certificate
  community.crypto.openssl_csr:
    path: "{{ cert_dir }}/metrics-server/metrics-server.csr"
    privatekey_path: "{{ cert_dir }}/metrics-server/metrics-server.key"
    key_usage:
      - digitalSignature
      - keyEncipherment
    key_usage_critical: true
    extended_key_usage:
      - serverAuth
    subject_alt_name: "{{ item.value | map('regex_replace', '^', 'DNS:') | list }}"
  with_dict:
    dns_server: "{{ dns_server }}"

- name: Sign certificate with our CA
  community.crypto.x509_certificate:
    path: "{{ cert_dir }}/metrics-server/metrics-server.crt"
    csr_path: "{{ cert_dir }}/metrics-server/metrics-server.csr"
    provider: ownca
    ownca_path: "{{ master_cert_dir }}/ca.crt"
    ownca_privatekey_path: "{{ master_cert_dir }}/ca.key"
    # ownca_path: "{{ cert_dir }}/metrics-server/apiextca.crt"
    # ownca_privatekey_path: "{{ cert_dir }}/metrics-server/apiextca.key"
    ownca_not_after: "+{{ cert_validity_days }}d" # valid for one year
  register: certificate #}