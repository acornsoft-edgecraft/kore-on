# publish docker image
# - https://docs.github.com/en/free-pro-team@latest/actions/guides/publishing-docker-images
# - https://github.com/docker/build-push-action

name: Build & Push
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (optional)'
        required: false
  push:
    tags:
      - v*
jobs:
  build_and_push:
    name: Build & Push
    runs-on: ubuntu-latest
    steps:
      - name: Set variables
        id: variables
        run: |
          PROJECT="kore-on"
          VERSION="${{ github.event.inputs.version }}"
          REGISTRY="ghcr.io/${{ github.repository_owner }}"
          if [[ $VERSION == "" ]]; then
            GITHUB_REF="${{ github.ref }}"
            if [[ $GITHUB_REF == refs/tags/* ]]; then
              VERSION=${GITHUB_REF#refs/tags/}
            elif [[ $GITHUB_REF == refs/heads/* ]]; then
              VERSION="$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')-$(date '+%Y%m%d%H%M%S')"
            elif [[ $GITHUB_REF == refs/pull/* ]]; then
              VERSION="pr-${{ github.event.number }}"
            fi
          fi
          echo ::set-output name=prefix::${REGISTRY}
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=project::${PROJECT}
      - name: Check out the repository
        uses: actions/checkout@v3
      - name: Login GHCR
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build docker image [${{steps.variables.outputs.project}}]
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{steps.variables.outputs.prefix}}/${{steps.variables.outputs.project}}:${{steps.variables.outputs.version}}
            ${{steps.variables.outputs.prefix}}/${{steps.variables.outputs.project}}:latest
      # build_release
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ^1.19.0
      - name: Build artifacts
        run: |
          GOOS=linux GOARCH=amd64 go build -o bin/linux/amd64/koreonctl -ldflags="-X 'main.Version=${{ steps.variables.outputs.version }}' -X 'main.CommitId=$(git rev-parse HEAD)' -X 'main.BuildDate=$(date -u +%FT%T%Z)'" cmd/koreonctl/main.go
          GOOS=darwin GOARCH=amd64 go build -o bin/darwin/amd64/koreonctl -ldflags="-X 'main.Version=${{ steps.variables.outputs.version }}' -X 'main.CommitId=$(git rev-parse HEAD)' -X 'main.BuildDate=$(date -u +%FT%T%Z)'" cmd/koreonctl/main.go
          GOOS=windows GOARCH=amd64 go build -o bin/windows/amd64/koreonctl -ldflags="-X 'main.Version=${{ steps.variables.outputs.version }}' -X 'main.CommitId=$(git rev-parse HEAD)' -X 'main.BuildDate=$(date -u +%FT%T%Z)'" cmd/koreonctl/main.go
          chmod +x bin/linux/amd64/koreonctl
          chmod +x bin/darwin/amd64/koreonctl
          for i in "linux-amd64" "darwin" "windows"
          do
            mkdir -p koreonctl-"$i"/bin
            mkdir -p koreonctl-"$i"/config
            mkdir -p koreonctl-"$i"/archive
            mkdir -p koreonctl-"$i"/log
            cp bin/linux/amd64/koreonctl koreonctl-"$i"/bin
            tar -czvf koreonctl-"$i".tar.gz koreonctl-"$i"
          done
          
      - name: Release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: true
          release_name: Release ${{ steps.variables.outputs.version }}
          tag_name: ${{ steps.variables.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Upload linux artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: koreonctl-linux-amd64.tar.gz
          asset_name: koreonctl-linux-amd64.tar.gz
          asset_content_type: application/octet-stream
      - name: Upload darwin artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: koreonctl-darwin.tar.gz
          asset_name: koreonctl-darwin.tar.gz
          asset_content_type: application/octet-stream
      - name: Upload windows artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: koreonctl-windows.tar.gz
          asset_name: koreonctl-windows.tar.gz
          asset_content_type: application/octet-stream

